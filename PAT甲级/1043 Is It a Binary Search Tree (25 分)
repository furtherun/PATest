
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
int n, cnt = 0;
class Node {
public:
    int data;
    Node* lchild, * rchild;
};
Node* NewNode(int value) {
    Node* tmp = new Node;
    tmp->data = value;
    tmp->lchild = tmp->rchild = nullptr;
    return tmp;
}
void Insert(Node*& root, int value) {	 //构造二叉树
    if (!root) {
        root = NewNode(value);
        return;
    }
    if (value < root->data) Insert(root->lchild, value);
    else Insert(root->rchild, value);
}
void Postorder(Node* root) { 	//二叉树后序遍历结果输出
    if (!root) return;
    Postorder(root->lchild);
    Postorder(root->rchild);
    cout << root->data;
    cnt ++;
    cnt == n? cout << endl: cout << " ";
}
void MirrorPostorder(Node* root) {	//镜像二叉树后序遍历结果输出
    if(!root) return;
    MirrorPostorder(root->rchild);
    MirrorPostorder(root->lchild);
    cout << root->data;
    cnt ++;
    cnt == n? cout << endl: cout << " ";
}
void Preorder(Node* root, vector<int>& vi) {	//得到二叉树前序遍历结果
    if(!root) return;
    vi.push_back(root->data);
    Preorder(root->lchild, vi);
    Preorder(root->rchild, vi);
}
void MirrorPreorder(Node* root, vector<int>& vi) {	//得到镜像二叉树前序遍历结果
    if (!root) return;
    vi.push_back(root->data);
    MirrorPreorder(root->rchild, vi);
    MirrorPreorder(root->lchild, vi);
}
int main() {
    cin >> n;
    int tmp;
    vector <int> vi, pre, mirrorPre;
    Node* root = nullptr;
    for (int i = 0; i < n; ++ i) {
        cin >> tmp;
        vi.push_back(tmp);
        Insert(root, tmp);
    }
    Preorder(root, pre);
    MirrorPreorder(root, mirrorPre);
    if (pre == vi) {
        puts("YES");
        Postorder(root);
    } else if (mirrorPre == vi) {
        puts("YES");
        MirrorPostorder(root);
    } else puts("NO");
    return 0;
}
//野路子，倒数第二个测试格式错误
//修正，一个数据时有多余空格
#include <iostream>
#include <algorithm>
using namespace std;
const int MAXN = 1005;
int arr[MAXN];
int n, cnt = 0; 	//总节点数
bool isBinaryTree(int left, int right) {
	if (left >= right) return true;
	int root = arr[left];
	int pos = left;
	for (pos = left + 1; pos <= right; pos++) {
		if (arr[pos] >= root) break; //寻找第一个大于等于根节点的位置
	}
	for (int i = pos + 1; i <= right; ++i) {
		if (arr[i] < root) return false;
	}
	return isBinaryTree(left + 1, pos - 1) && isBinaryTree(pos, right);
}
bool isMirrorBinaryTree(int left, int right) {
	if (left >= right) return true;
	int root = arr[left];
	int pos = left;
	for (pos = left + 1; pos <= right; pos++) {
		if (arr[pos] < root) break; //寻找第一个小于根节点的位置
	}
	for (int i = pos + 1; i <= right; ++i) {
		if (arr[i] >= root) return false;
	}
	return isMirrorBinaryTree(left + 1, pos - 1) && isMirrorBinaryTree(pos, right);
}
void PrintBinaryTree(int left, int right) {
	if (left == right) {
		cout << arr[left];
		cnt++;
        if (cnt < n) cout << " ";
		return;
	}
	else if (left > right) return;
	int root = arr[left];
	int pos = left;
	for (pos = left + 1; pos <= right; pos++) {
		if (arr[pos] >= root) break; //寻找第一个大于等于根节点的位置
	}
	PrintBinaryTree(left + 1, pos - 1);
	PrintBinaryTree(pos, right);
	printf("%d", root);
	cnt++;
	cnt != n ? printf(" ") : printf("\n");
}
void PrintMirrorBinaryTree(int left, int right) {
	if (left == right) {
		cout << arr[left];
		cnt++;
        if (cnt < n) cout << " ";
		return;
	}
	else if (left > right) return;
	int root = arr[left];
	int pos = left;
	for (pos = left + 1; pos <= right; pos++) {
		if (arr[pos] < root) break; //寻找第一个大于等于根节点的位置
	}
	PrintMirrorBinaryTree(left + 1, pos - 1);
	PrintMirrorBinaryTree(pos, right);
	printf("%d", root);
	cnt++;
	cnt != n ? printf(" ") : printf("\n");
}
int main() {
	cin >> n;
	for (int i = 0; i < n; ++i) {
		cin >> arr[i];
	}
	if (isBinaryTree(0, n - 1)) {
		puts("YES");
		PrintBinaryTree(0, n - 1);
	}
	else if (isMirrorBinaryTree(0, n - 1)) {
		puts("YES");
		PrintMirrorBinaryTree(0, n - 1);
	}
	else {
		puts("NO");
	}
	return 0;
}
