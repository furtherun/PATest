#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
class Node {
public:
    int value;
    Node* lchild, *rchild;
};
int n;
vector <int> pre, in;
Node* NewNode(int v) {
    Node* tmp = new Node;
    tmp->value = v;
    tmp->lchild = tmp->rchild = nullptr;
    return tmp;
}
Node* BuildTree(int preL, int preR, int inL, int inR) {
    if (preR < preL) return nullptr;
    Node* root = NewNode(pre[preL]);
    int k;
    for (k = inL; k <= inR; ++ k) {
        if (in[k] == pre[preL]) break;
    }
    int numL = k - inL; //左子树结点数
    root->lchild = BuildTree(preL + 1, preL + numL, inL, k - 1);
    root->rchild = BuildTree(preL + numL + 1, preR, k + 1, inR);
    return root;
}
bool flag = false;
void Postorder(Node* root) {
    if (root == nullptr) return;
    Postorder(root->lchild);
    Postorder(root->rchild);
    if (!flag) {
        printf("%d\n", root->value);
        flag = true;
    } else return;
}
int main() {
    scanf("%d", &n);
    pre.resize(n), in.resize(n);
    for (int i = 0; i < n; ++ i) {
        scanf("%d", &pre[i]);
    }
    for (int i = 0; i < n; ++ i) {
        scanf("%d", &in[i]);
    }
    Node* root = BuildTree(0, n - 1, 0, n - 1);
    Postorder(root);
    return 0;
}
