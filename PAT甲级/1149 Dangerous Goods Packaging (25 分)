//果然需要hashTable来加快查找
#include <iostream>
#include <algorithm>
#include <vector>
#include <unordered_map>
using namespace std;
const int MAXN = 100000;
int hashTable[MAXN];
int main() {
    int n, m, k, a, b, tmp; //如题
    scanf("%d %d", &n, &m);
    unordered_map <int, vector<int> > mp;
    for (int i = 0; i < n; ++ i) {
        scanf("%d %d", &a, &b);
        if (a < b) swap(a, b);
        mp[a].push_back(b);
    }
    while (m --) {
        bool flag = true;
        scanf("%d", &k);
        fill(hashTable, hashTable + MAXN, 0); //0表示未放入，-1表示不能放入，1表示已经放入
        for (int i = 0; i < k; ++ i) {
            scanf("%d", &tmp);
            if (!flag) continue; //已经判断失败
            if (hashTable[tmp] == -1) {
                printf("No\n");
                flag = false;
            } else if (hashTable[tmp] == 0) {
                hashTable[tmp] = 1;
                for (vector <int>::iterator it = mp[tmp].begin(); it != mp[tmp].end(); ++ it) {
                    hashTable[*it] = -1;
                }
            }
        }
        if (flag) printf("Yes\n");
    }
    return 0;
}
