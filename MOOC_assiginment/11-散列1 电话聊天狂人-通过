#include <iostream>
#include <string>
#include <vector>
#define MAXN 11

using namespace std;
using PtrToNode = class LNode*;
class LNode
{
public:
    string data;
    PtrToNode next;
    int cnt;
    LNode () {
        data ="", next = nullptr, cnt = 0;
    }
};
using Position = PtrToNode;
using List = PtrToNode;

using HashTable = class TblNode*;

class TblNode
{
public:
    int tableSize;
    List heads;
};
HashTable CreateHashTable(int n);
int nextPrime(int n);
Position Find(HashTable h, string key);
int Hash(string key, int n);
void Insert(HashTable h, string key);
void Print(HashTable h);

int main()
{
    int n;
    string key;
    HashTable hashTable;
    cin >> n;
    hashTable = CreateHashTable(n * 2);
    for (int i = 0; i < n; ++ i) {
        cin >> key;
        Insert(hashTable, key);
        cin >> key;
        Insert(hashTable, key);
    }
    Print(hashTable);
    return 0;
}

HashTable CreateHashTable(int n)
{
    HashTable h = new TblNode;
    h->tableSize = nextPrime(n);
    h->heads = new LNode[h->tableSize]; //注意这里一开始漏了h->tableSize,申请没能申请一个连续的数组
    return h;
}
int nextPrime(int n)
{
    if (n == 1) n += 2;
    int tmp = ( (n % 2 == 0) ? n + 1: n );
    while (true) {
        bool flag = true;
        for (int i = 2; i * i <= tmp; ++ i) {
            if (tmp % i == 0) {
                flag = false;
                break;
            }
        }
        if (flag) return tmp;
        tmp += 2;
    }
}
void Insert(HashTable h, string key)
{
    Position p, newCell;
    int pos;
    p = Find(h, key);
    if (!p) {
        newCell = new LNode;
        newCell->data = key;
        newCell->cnt = 1;
        pos = Hash(key, h->tableSize);
        newCell->next = h->heads[pos].next;
        h->heads[pos].next = newCell;
    }
    else {
        p->cnt ++;
    }
}
Position Find(HashTable h, string key)
{
    Position p;
    int pos;
    pos = Hash(key, h->tableSize);
    p = h->heads[pos].next;
    while (p && (p->data != key) ) {
        p = p -> next;
    }
    return p;
}
int Hash(string key, int n)
{
    int tmp = stoi(key.substr(key.size() - 5, 5));
    return tmp % n;
}
void Print(HashTable h)
{
    int maxCnt = 0, pCnt = 0;
    string minPhone;
    List p;
    for (int i = 0; i < h->tableSize; ++ i) {
        p = h->heads[i].next;
        while(p) {
            if (p->cnt > maxCnt) {
                maxCnt = p->cnt;
                minPhone = p->data;
                pCnt = 1;
            }
            else if (p->cnt == maxCnt) {
                pCnt ++;
                if (p->data < minPhone) {
                    minPhone = p->data;
                }
            }
            p = p->next;
        }
    }
    cout << minPhone << " " << maxCnt;
    if (pCnt > 1) {
        cout << " " << pCnt << endl;
    }
}
