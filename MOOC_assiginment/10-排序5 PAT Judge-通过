#include <iostream>
#include <array>
#include <istream>
#include <algorithm>

using namespace std;
const int problemMAXN = 7;
const int userMAXN = 10005;
int n, k, m; //人数，题目数，提交数
int index = 1;
class User
{
public:
    int id;
    int acNum;
    bool flag;
    array <int,problemMAXN> score; //总分存储在0号位
//    friend istream& operator >> (istream& is, User u);
};
array <int, problemMAXN> problemScore;
array <User, userMAXN> user;

void Init();
bool cmp(User u1, User u2);
void Print();
void Sort();
void Output(int n);

bool cmp (User u1, User u2)
{
    if (u1.score[0] != u2.score[0]) {
        return u1.score[0] > u2.score[0];
    }
    else if (u1.acNum != u2.acNum){
        return u1.acNum > u2.acNum;
    }
    else if (u1.flag != u2.flag) {
        return u1.flag > u2.flag;
    }
    else {
        return u1.id < u2.id;
    }
}

void Init ()
{
    cin >> n >> k >> m;
    for (int i = 1; i <= k; ++ i) {
        cin >> problemScore[i];
    }
    for (int i = 1; i <= n; ++ i) {
        fill(user[i].score.begin(), user[i].score.end(), -2); //初始化时 -2 未未提交 -1 为编译不通过 0 为答案错误
        user[i].score[0] = 0; //总分初始化为 0
        user[i].acNum = 0;
        user[i].flag = false; //AC数量 注意重复AC的题目
    }
    int id,problemId, scoreObtained;
    for (int i = 1; i <= m; ++ i) {
        cin >> id >> problemId >> scoreObtained;
        user[id].id = id;
        if (scoreObtained == -1) { //提交但编译未通过
            if (user[id].score[problemId] == -2) { // 该题未曾提交
                user[id].score[problemId] = -1;  //状态改为编译未通过 区别未提交
            }
        }
        else { // 得分 >=  0
            user[id].flag = true; // 输出标志
            if (scoreObtained == problemScore[problemId] && user[id].score[problemId] != scoreObtained) { //首次满分 ac判断
                user[id].acNum ++;
            }
             if (user[id].score[problemId] < 0) { // 原先并未得过分数
                user[id].score[0] += scoreObtained;
                user[id].score[problemId] = scoreObtained;
            }
            else { //并非首次提交
                 if ( scoreObtained > user[id].score[problemId]) { // 比原来的要大
                    user[id].score[0] += (scoreObtained - user[id].score[problemId]);
                    user[id].score[problemId] = scoreObtained;
                }
            }
        }
    }
}
void Output(int i)
{
    printf("%d %05d %d ", index, user[i].id, user[i].score[0]);
    for (int j = 1; j <= k; ++ j) {
        if (user[i].score[j] == -1) { // 编译未通过 分数显示 为 0
            printf("0");
        }
        else if (user[i].score[j] == -2) { // 未进行作答
            printf("-");
        }
        else {
            printf("%d", user[i].score[j]); // 正常分数
        }
        if (j != k) printf(" "); // 空格和换行格式输出
        else cout << endl;
    }
}
void Print( )
{
    int tmp = 1;
    Output(1);
    for (int i = 2; i <= n; ++ i) {
        if (!user[i].flag) {
            break;
        }
        else {
            if (user[i].score[0] == user[i - 1].score[0]) { //判断是否和前一个人分数相等
                tmp ++;
            }
            else {
                index += tmp;
                tmp = 1;
            }
            Output(i);
        }
    }
}
void Sort( )
{
    sort(user.begin() + 1, user.begin() + 1 + n, cmp);
}
int main()
{
    Init();
    Sort();
    Print();
    return 0;
}
